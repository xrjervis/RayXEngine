#pragma once
#include <cstdint>
#include <memory>
#define UINFINITY		(u32(-1));
#define BIT_FLAG(f)		(1U << (f))

using uint = unsigned int;

using u64 = uint64_t;
using u32 = uint32_t;
using u16 = uint16_t;
using u8 = uint8_t;

using s64 = int64_t;
using s32 = int32_t;
using s16 = int16_t;
using s8 = int8_t;

using threadHandle = int;

template<typename T>
using Uptr = std::unique_ptr<T>;

template<typename T>
using Sptr = std::shared_ptr<T>;

enum ePrimitiveType {
	PRIMITIVE_TYPE_POINTLIST,
	PRIMITIVE_TYPE_LINELIST,
	PRIMITIVE_TYPE_LINESTRIP,
	PRIMITIVE_TYPE_TRIANGLELIST,
	PRIMITIVE_TYPE_TRIANGLESTRIP
};

enum eTextureFormat {
	TEXTURE_FORMAT_R8G8B8A8_UNORM,
	TEXTURE_FORMAT_R32G32B32A32_FLOAT,
	TEXTURE_FORMAT_D24_UNORM_S8_UINT
};

enum eMemoryUsage {
	MEMORY_USAGE_DEFAULT,
	MEMORY_USAGE_STATIC,
	MEMORY_USAGE_DYNAMIC,
	MEMORY_USAGE_STAGING
};

enum eBindFlags : u32 {
	BIND_VERTEX_BUFFER = BIT_FLAG(0),
	BIND_INDEX_BUFFER = BIT_FLAG(1),
	BIND_CONSTANT_BUFFER = BIT_FLAG(2),
	BIND_UNORDERED_ACCESS = BIT_FLAG(3),
	BIND_RENDER_TARGET = BIT_FLAG(4),
	BIND_DEPTH_STENCIL = BIT_FLAG(5),
	BIND_SHADER_RESOURCE = BIT_FLAG(6)
};

enum eCullMode {
	CULL_MODE_DISABLE,
	CULL_MODE_BACK,
	CULL_MODE_FRONT
};

enum eFillMode {
	FILL_MODE_SOLID,
	FILL_MODE_WIREFRAME
};

enum eComparisonFunc {
	COMPARISON_NEVER,
	COMPARISON_LESS,
	COMPARISON_EQUAL,
	COMPARISON_LESS_EQUAL,
	COMPARISON_GREATER,
	COMPARISON_NOT_EQUAL,
	COMPARISON_GREATER_EQUAL,
	COMPARISON_ALWAYS
};

enum eBlendFactor {
	BLEND_ZERO,
	BLEND_ONE,
	BLEND_SRC_COLOR,
	BLEND_INV_SRC_COLOR,
	BLEND_SRC_ALPHA,
	BLEND_INV_SRC_ALPHA,
	BLEND_DST_COLOR,
	BLEND_INV_DST_COLOR,
	BLEND_DST_ALPHA,
	BLEND_INV_DST_ALPHA,
	BLEND_CONSTANT,
	BLEND_INV_CONSTANT
};

enum eBlendOp{
	BLEND_OP_ADD,
	BLEND_OP_SUBTRACT,
	BLEND_OP_REV_SUBTRACT,
	BLEND_OP_MIN,
	BLEND_OP_MAX
};

enum eStencilOp {
	STENCIL_OP_KEEP,
	STENCIL_OP_ZERO,
	STENCIL_OP_REPLACE,
	STENCIL_OP_INCREMENT,
	STENCIL_OP_INCREMENT_SAT,
	STENCIL_OP_DECREMENT,
	STENCIL_OP_DECREMENT_SAT,
	STENCIL_OP_INVERT
};

enum eShaderType {
	SHADER_TYPE_VERTEX_SHADER,
	SHADER_TYPE_PIXEL_SHADER,
	SHADER_TYPE_HULL_SHADER,
	SHADER_TYPE_DOMAIN_SHADER,
	SHADER_TYPE_GEOMETRY_SHADER,
	SHADER_TYPE_COMPUTE_SHADER
};

enum eWrapMode {
	WRAP_MODE_LOOP,
	WRAP_MODE_CLAMP,
	WRAP_MODE_MIRROR,
	WRAP_MODE_BORDER
};

enum eFilterType {
	FILTER_TYPE_ANISOTROPIC,
	FILTER_TYPE_MIN_MAG_MIP_LINEAR,
	FILTER_TYPE_MIN_MAG_MIP_POINT
};